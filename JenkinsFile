pipeline {
    agent any
       environment {
               AWS_ACCOUNT_ID = '597088054150'
               AWS_DEFAULT_REGION = 'us-east-1'   // change as needed
               IMAGE_REPO_NAME = 'jobrecommendationsystem'
               IMAGE_TAG = "v1"
               REPOSITORY_URI= "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
               ECS_CLUSTER         = 'jrs-cluster'
               ECS_SERVICE         = 'jrs-service'
               TASK_DEF_FAMILY     = 'jrs-task'
               CONTAINER_NAME      = 'jrs-container'
           }

            stages {
                    stage('AWS ECR Login') {
                        steps {
                              script {
                                    sh """
                                        echo "Logging into ECR ..."
                                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                                    """
                                }
                            }
                        }

                    stage('Clone Git Repository') {
                              steps {
                              dir('JobRecommandetionSystem-Backend') {
                                  checkout([
                                      $class: 'GitSCM',
                                      branches: [[name: '*/main']],
                                      userRemoteConfigs: [[
                                          url: 'https://github.com/1202rushikeshr/JobRecommandetionSystem-Backend',
                                          credentialsId: '' // ❗ If it's private, add your Git credentials ID here
                                      ]]
                                  ])
                                  }
                              }
                          }

                   stage('Build Gradle Project') {
                        steps {
                                sh 'chmod +x gradlew'
                                sh './gradlew clean build'
                            }
                        }

                   stage('Build Docker Image') {
                         steps {
                                script {
                                            dockerImage = docker.build("${IMAGE_REPO_NAME}:${IMAGE_TAG}", "-f ./JobRecommandetionSystem-Backend/Dockerfile .")
                                        }
                                    }
                                }

            stage('Tag and Push Docker Image to ECR') {
                                steps {
                                    script {
                                        sh """docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"""
                                        sh """docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"""
                                    }
                                }
                            }

            stage('Register New ECS Task Definition') {
                                steps {
                                      script {
                                                            // Export the current task definition and update the image
                                          sh """
                                               aws ecs describe-task-definition --task-definition ${TASK_DEF_FAMILY} \
                                                --query "taskDefinition" > task-def.json

                                                jq '.containerDefinitions[0].image = "${REPOSITORY_URI}:${IMAGE_TAG}"' task-def.json > new-task-def.json
                                                jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' new-task-def.json > task-def-register.json

                                                aws ecs register-task-definition --cli-input-json file://task-def-register.json
                                                """
                                                 }
                                      }
                                }

            stage('Update ECS Service to Deploy Tomcat') {
                                steps {
                                       sh """
                                            aws ecs update-service \
                                               --cluster ${ECS_CLUSTER} \
                                                 --service ${ECS_SERVICE} \
                                                    --force-new-deployment \
                                                     --region ${AWS_REGION}
                                                    """
                                            }
                                       }
                  }



            post {
                    success {
                        echo "✅ Build and ECR push completed."
                    }
                    failure {
                        echo "❌ Pipeline failed. Check the stage logs above."
                    }
                 }

        }